#!/usr/bin/env php
<?php

if (PHP_SAPI !== 'cli') {
    header('Content-Type: text/plain; charset=UTF-8', true, 400);
    exit("This script only works on php-cli.\n");
}
if (DIRECTORY_SEPARATOR !== '/') {
    fwrite(STDERR, "Windows is not supported.\n");
    exit(1);
}

if (is_file(__DIR__ . '/autoload.php')) {
    require __DIR__ . '/autoload.php';
} elseif (is_file(__DIR__ . '/../../autoload.php')) {
    require __DIR__ . '/../../autoload.php';
} elseif (is_file(__DIR__ . '/vendor/autoload.php')) {
    require __DIR__ . '/vendor/autoload.php';
} else {
    fwrite(STDERR,
        "You need to set up the project dependencies using the following commands:\n" .
        "curl -s http://getcomposer.org/installer | php\n" .
        "php composer.phar install\n"
    );
    exit(1);
}

function usage()
{
    $cert = __DIR__ . '/certificate.pem';
    fwrite(STDERR,
"
Usage:
    $_SERVER[SCRIPT_NAME] <options>

[REQUIRED]
    -S   Server URL such as \"https://127.0.0.1:8081\".
         When protocol is omitted, it is assumed as \"http://\".
         When port is omitted, it is assumed as 80(http) or 443(https).
         Multiple arguments can be accepted.
         At least 1 server must be specified.
         Note that \"https://\" is supported only on PHP 5.6.0 or later.

[OPTIONAL]
    -n   The number of PHP built-in server clusters. Default is 10.
    -t   Path for document root. Default is the current directory.
    -r   Path for router script. Default is empty.
    -c   Path for alternative PEM-encoded certificate.
         Default is \"$cert\".

"
    );
}

$options = getopt('S:n:t:r:c:h');

$help    = isset($options['h']);
$servers = isset($options['S']) ? (array)$options['S'] : [];
$docroot = isset($options['t']) ? current((array)$options['t']) : null;
$number  = isset($options['n']) ? (int)current((array)$options['n']) : 10;
$router  = isset($options['r']) ? current((array)$options['r']) : null;
$cert    = isset($options['c']) ? current((array)$options['c']) : (__DIR__ . '/certificate.pem');

if ($help) {
    usage();
    exit(0);
}

if (!$servers) {
    fwrite(STDERR, "Error: At least 1 server must be specified.\n");
    usage();
    exit(1);
}

try {

    if ($number < 1 || $number > 20) {
        throw new \RuntimeException('The number of clusters must be between 1 and 20.');
    }

    $listeners = [];
    foreach ($servers as $i => $server) {
        $proto = parse_url($server, PHP_URL_SCHEME);
        if ($proto === false) {
            throw new \RuntimeException("Server[$i]: The specified URL could not be parsed.");
        }
        if ($proto === null) {
            $proto = 'http';
            $server = 'http://' . $server;
        }
        $host = parse_url($server, PHP_URL_HOST);
        $port = parse_url($server, PHP_URL_PORT);
        if ($proto !== 'http' && $proto !== 'https') {
            throw new \RuntimeException("Server[$i]: Protocol must be http:// or https://.");
        }
        if ($host === null) {
            throw new \RuntimeException("Server[$i]: Host is not specified.");
        }
        if ($port === null) {
            $port = $proto === 'https' ? 443 : 80;
        }
        $listeners[] = [$host, $port, $proto === 'https', $cert];
    }

    $loop = React\EventLoop\Factory::create();

    $used_processes = [];
    $factory = new mpyw\HyperBuiltinServer\BuiltinServerFactory($loop, 5, PHP_BINARY);
    $factory
    ->createMultipleAsync($number, '127.0.0.1', $docroot)
    ->then(function (array $processes) use ($loop, $listeners, &$used_processes) {
        $used_processes = $processes;
        $master = new mpyw\HyperBuiltinServer\Master($loop, $processes);
        foreach ($listeners as $listener) {
            $master->addListener($listener[0], $listener[1], $listener[2]);
        }
    })
    ->then(null, function ($e) use (&$used_processes) {
        foreach ($used_processes as $process) {
            $process->terminate();
        }
        throw $e;
    })
    ->done();

    set_time_limit(0);
    $loop->run();

} catch (\Exception $e) {

    fwrite(STDERR, "Error: {$e->getMessage()}\n");
    exit(1);

}
